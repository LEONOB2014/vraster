#+TITLE:     Visualización de datos raster
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+DATE: 24 de Octubre de 2014

#+OPTIONS: H:2
#+PROPERTY: eval no
#+PROPERTY: exports both 
#+PROPERTY: results output graphics

* Introducción

** Datos raster
** Paquete raster

- Define funciones para crear, leer, manipular y escribir datos raster.
- Implementa algebra raster y funciones de uso común en GIS.
- Es capaz de trabajar con ficheros muy grandes trabajando en disco y procesando por lotes.
- Clases:
  - =RasterLayer=
  - =RasterBrick=
  - =RasterStack=

** Paquete raster

- Funciones básicas: =abs=, =round=, =ceiling=, =floor=, =trunc=,
  =sqrt=, =log=, =log10=, =exp=, =cos=, =sin=, =max=, =min=, =range=,
  =prod=, =sum=, =any=, =all=.
- Se pueden mezclar objetos =Raster*= con números.

** Funciones para modificar contenido y extensión, o para combinar objetos:

  - The =crop= function takes a geographic subset of a larger
    =Raster*= object. =trim= crops a =RasterLayer=
    by removing the outer rows and columns that only contain =NA=
    values. =extend= adds new rows and/or columns with
    =NA= values.
  - The =merge= function merges two or more =Raster*=
    objects into a single new object.
  - =projectRaster= transforms values of a =Raster*=
    object to a new object with a different coordinate reference system.
** Funciones para modificar contenido y extensión, o para combinar objetos:
  - With =overlay=, multiple =Raster*= objects can be
    combined (for example, multiply them).
  - =mask= removes all values from one layer that are
    =NA= in another layer, and =cover= combines two layers
    by taking the values of the first layer except where these are
    =NA=.
** Funciones para modificar contenido y extensión, o para combinar objetos:
  - =calc= computes a function for a =Raster*=
    object. With =RasterLayer= objects, another
    =RasterLayer= is returned. With multilayer objects the result
    depends on the function: With a summary function (=sum=,
    =max=, etc.),  =calc= returns a =RasterLayer=
    object, and a =RasterBrick= object otherwise.
  - =stackApply= computes summary layers for subsets of a
    =RasterStack= or =RasterBrick=.
** Funciones para modificar contenido y extensión, o para combinar objetos:
  - =cut= and =reclassify= replace ranges of values
    with single values.
  - =zonal= computes zonal statistics, that is, summarizes a
    =Raster*= object using zones (areas with the same integer
    number) defined by another =RasterLayer=.

** Paquete =rasterVis=

* Datos Cuantitativos

** Datos
#+begin_src R :results output graphics :exports both :file figs/leveplotSISavOrig.pdf
  library(raster)
  library(rasterVis)
  SISav <- raster('data/SISav')
  levelplot(SISav)
#+end_src

** 
#+RESULTS:
[[file:figs/leveplotSISavOrig.pdf]]

** Fronteras
#+begin_src R 
  library(maps)
  library(mapdata)
  library(maptools)
  
  ext <- as.vector(extent(SISav))
  boundaries <- map('worldHires',
                    xlim=ext[1:2], ylim=ext[3:4],
                    plot=FALSE)
  boundaries <- map2SpatialLines(boundaries,
                                 proj4string=CRS(projection(SISav)))
#+end_src

** Fronteras
#+begin_src R :results output graphics :exports both :file figs/leveplotSISavBoundaries.pdf
  levelplot(SISav) + layer(sp.lines(boundaries, lwd=0.5))
#+end_src

#+RESULTS:
[[file:figs/leveplotSISavBoundaries.pdf]]

** Hill shading

- Download a Digital Elevation Model (DEM) from the DIVA-GIS service.

#+begin_src R :eval no-export
  old <- setwd(tempdir())
  download.file('http://biogeo.ucdavis.edu/data/diva/msk_alt/ESP_msk_alt.zip, 'ESP_msk_alt.zip')
  unzip('ESP_msk_alt.zip', exdir='.')
  
  DEM <- raster('ESP_msk_alt')
#+end_src

** Hill shading
- Compute the hill shade raster with =terrain= and =hillShade= from =raster=.

#+begin_src R
  slope <- terrain(DEM, 'slope')
  aspect <- terrain(DEM, 'aspect')
  hs <- hillShade(slope=slope, aspect=aspect,
                  angle=20, direction=30)
#+end_src

#+begin_src R :eval no-export
  setwd(old)
#+end_src

** Hill Shading
- Combine the result with the previous map using semitransparency.

#+begin_src R :results output graphics :exports both :width 2000 :height 2000 :res 300 :file figs/hillShading.png
  ## hillShade theme: gray colors and semitransparency
  hsTheme <- modifyList(GrTheme(), list(regions=list(alpha=0.6)))
  
  levelplot(SISav, panel=panel.levelplot.raster,
            margin=FALSE, colorkey=FALSE) +
      levelplot(hs, par.settings=hsTheme, maxpixels=1e6) +
      layer(sp.lines(boundaries, lwd=0.5))
#+end_src

** 
#+RESULTS:
[[file:figs/hillShading.png]]

** 3D

#+begin_src R
  plot3D(DEM, maxpixels=5e4)
#+end_src

The output scene can be exported to several formats such as WebGL with
=writeWebGL= to be rendered in a browser, or =STL= with =writeSTL=, a
format commonly used in 3D printing. Files using this format are
[[https://github.com/oscarperpinan/spacetime-vis/blob/gh-pages/images/DEM.stl][viewed easily on GitHub]].

#+begin_src R :eval no-export
writeSTL('figs/DEM.stl')
#+end_src

* Datos Categóricos
** Datos
This section illustrates how to read and display rasters with
categorical information using information from the NEO-NASA
project. 
#+begin_src R :eval no-export
  library(raster)
  ## China and India  
  ext <- extent(65, 135, 5, 55)
  
  pop <- raster('data/875430rgb-167772161.0.FLOAT.TIFF')
  pop <- crop(pop, ext)
  pop[pop==99999] <- NA
  
  landClass <- raster('data/241243rgb-167772161.0.TIFF')
  landClass <- crop(landClass, ext)
#+end_src

** RAT

#+begin_src R
  landClass[landClass %in% c(0, 254)] <- NA
  ## Only four groups are needed:
  ## Forests: 1:5
  ## Shrublands, etc: 6:11
  ## Agricultural/Urban: 12:14
  ## Snow: 15:16
  landClass <- cut(landClass, c(0, 5, 11, 14, 16))
  ## Add a Raster Attribute Table and define the raster as categorical data
  landClass <- ratify(landClass)
  ## Configure the RAT: first create a RAT data.frame using the
  ## levels method; second, set the values for each class (to be
  ## used by levelplot); third, assign this RAT to the raster
  ## using again levels
  rat <- levels(landClass)[[1]]
  rat$classes <- c('Forest', 'Land', 'Urban', 'Snow')
  levels(landClass) <- rat
#+end_src

** levelplot


#+begin_src R :results output graphics :exports both :file figs/landClass.pdf
  library(rasterVis)
  
  pal <- c('palegreen4', # Forest
           'lightgoldenrod', # Land
           'indianred4', # Urban
           'snow3')      # Snow
  
  catTheme <- modifyList(rasterTheme(),
                         list(panel.background = list(col='lightskyblue1'),
                              regions = list(col= pal)))
  
  levelplot(landClass, maxpixels=3.5e5, par.settings=catTheme,
            panel=panel.levelplot.raster)
#+end_src

** 
#+RESULTS:
[[file:figs/landClass.pdf]]

** Relación con cuantitativos


#+begin_src R :results output graphics :exports both :file figs/populationNASA.pdf
  pPop <- levelplot(pop, zscaleLog=10, par.settings=BTCTheme,
                    maxpixels=3.5e5, panel=panel.levelplot.raster)
  pPop
#+end_src

** 
#+RESULTS:
[[file:figs/populationNASA.pdf]]

** Histograma
#+begin_src R :results output graphics :exports both :file figs/histogramLandClass.pdf
  s <- stack(pop, landClass)
  names(s) <- c('pop', 'landClass')
  histogram(~log10(pop)|landClass, data=s,
            scales=list(relation='free'))
#+end_src

#+RESULTS:
[[file:figs/histogramLandClass.pdf]]


* Raster Espacio-Temporales
** Introducción

** Datos

#+begin_src R 
  library(raster)
  library(zoo)
  library(rasterVis)
  
  SISdm <- brick('data/SISgal')
  
  timeIndex <- seq(as.Date('2011-01-01'), by='day', length=365)
  SISdm <- setZ(SISdm, timeIndex)
  names(SISdm) <- format(timeIndex, '%a_%Y%m%d')
#+end_src


** Level Plots

#+begin_src R :results output graphics :exports both :file figs/SISdm.pdf
  levelplot(SISdm, layers=1:12, panel=panel.levelplot.raster)
#+end_src


#+RESULTS:
[[file:figs/SISdm.pdf]]

** zApply

#+begin_src R 
  SISmm <- zApply(SISdm, by=as.yearmon, fun='mean')
#+end_src

** 
#+begin_src R :results output graphics :exports both :file figs/SISmm.pdf
  levelplot(SISmm, panel=panel.levelplot.raster)
#+end_src

#+RESULTS:
[[file:figs/SISmm.pdf]]

** Graphical Exploratory Data Analysis


** Histogram
#+begin_src R :results output graphics :exports both :file figs/SISdm_histogram.pdf
  histogram(SISdm, FUN=as.yearmon)
#+end_src

#+RESULTS:
[[file:figs/SISdm_histogram.pdf]]

** BWPlot
#+begin_src R :results output graphics :exports both :file figs/SISdm_boxplot.pdf
  bwplot(SISdm, FUN=as.yearmon)
#+end_src

#+RESULTS:
[[file:figs/SISdm_boxplot.pdf]]

** Splom
#+begin_src R :results output graphics :exports both :file figs/SISmm_splom.png :width 4000 :height 4000 :res 600
  splom(SISmm, xlab='', plot.loess=TRUE)
#+end_src

#+RESULTS:
[[file:figs/SISmm_splom.png]]


** Space-Time and Time Series Plots



** Hovmoller
#+begin_src R :results output graphics :exports both :file figs/SISdm_hovmoller_lat.pdf
  hovmoller(SISdm, par.settings=BTCTheme())
#+end_src
#+RESULTS:
[[file:figs/SISdm_hovmoller_lat.pdf]]

** xyplot
#+begin_src R :results output graphics :exports both :file figs/SISmm_xyplot.png :width 2000 :height 2000 :res 300
  xyplot(SISdm, digits=1, col='black', lwd=0.2, alpha=0.6)
#+end_src

#+RESULTS:
[[file:figs/SISmm_xyplot.png]]

** Horizonplot

#+begin_src R :results output graphics :exports both :file figs/SISdm_horizonplot.pdf
  horizonplot(SISdm, digits=1,
              col.regions=rev(brewer.pal(n=6, 'PuOr')),
              xlab='', ylab='Latitude')
#+end_src

#+RESULTS:
[[file:figs/SISdm_horizonplot.pdf]]


** Animation

#+begin_src R
  cft <- brick('data/cft_20130417_0000.nc')
  ## use memory instead of file
  cft[] <- getValues(cft)
  ## set projection
  projLCC2d <- "+proj=lcc +lon_0=-14.1 +lat_0=34.823 +lat_1=43 +lat_2=43 +x_0=536402.3 +y_0=-18558.61 +units=km +ellps=WGS84"
  projection(cft) <- projLCC2d
  #set time index
  timeIndex <- seq(as.POSIXct('2013-04-17 01:00:00', tz='UTC'), length=96, by='hour')
  cft <- setZ(cft, timeIndex)
  names(cft) <- format(timeIndex, 'D%d_H%H')
#+end_src


** Spatial Context: Administrative Boundaries
#+begin_src R 
  library(maptools)
  library(rgdal)
  library(maps)
  library(mapdata)
  
  
  projLL <- CRS('+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0')
  cftLL <- projectExtent(cft, projLL)
  cftExt <- as.vector(bbox(cftLL))
  boundaries <- map('worldHires',
                    xlim=cftExt[c(1,3)], ylim=cftExt[c(2,4)],
                    plot=FALSE)
  boundaries <- map2SpatialLines(boundaries, proj4string=projLL)
  boundaries <- spTransform(boundaries, CRS(projLCC2d))
#+end_src


** Producing the Frames and the Movie

#+begin_src R 
  cloudTheme <- rasterTheme(region=brewer.pal(n=9, 'Blues'))
#+end_src

#+begin_src R :eval no-export
  tmp <- tempdir()
  trellis.device(png, file=paste0(tmp, '/Rplot%02d.png'),
                        res=300, width=1500, height=1500)
  levelplot(cft, layout=c(1, 1), par.settings=cloudTheme) +
      layer(sp.lines(boundaries, lwd=0.6))
  dev.off()
#+end_src

** ffmpeg

#+begin_src R :eval no-export
  old <- setwd(tmp)
  ## Create a movie with ffmpeg using 6 frames per second a bitrate of 300kbs
  movieCMD <- 'ffmpeg -r 6 -b 300k -i Rplot%02d.png output.mp4'
  system(movieCMD)
  file.remove(dir(pattern='Rplot'))
  file.copy('output.mp4', paste0(old, '/figs/cft.mp4'), overwrite=TRUE)
  setwd(old)
#+end_src

[[http://vimeo.com/user18057623/cft][Video]]

** Static Image

#+begin_src R :results output graphics :exports both :file figs/cft.pdf
  levelplot(cft, layers=25:48, layout=c(6, 4),
            par.settings=cloudTheme,
            names.attr=paste0(sprintf('%02d', 1:24), 'h'),
            panel=panel.levelplot.raster) +
      layer(sp.lines(boundaries, lwd=0.6))
#+end_src

#+RESULTS:
[[file:figs/cft.pdf]]


* Campos Vectoriales
** Introducción

** Data
#+begin_src R 
  library(raster)
  library(rasterVis)
  
  wDir <- raster('data/wDir')/180*pi
  wSpeed <- raster('data/wSpeed')
  windField <- stack(wSpeed, wDir)
  names(windField) <- c('magnitude', 'direction')
#+end_src


** Vectorplot
#+begin_src R :results output graphics :exports both :file figs/vectorplot.pdf
  vectorplot(windField, isField=TRUE, par.settings=BTCTheme(),
             colorkey=FALSE, scales=list(draw=FALSE))
#+end_src


#+RESULTS:
[[file:figs/vectorplot.pdf]]

** streamlines

** streamplot
#+begin_src R :results output graphics :exports both :file figs/streamplot.pdf
  myTheme <- streamTheme(region=rev(brewer.pal(n=4, name='Greys')),
                                      symbol=BTC(n=9, beg=20))
  streamplot(windField, isField=TRUE,
             par.settings=myTheme,
             droplet=list(pc=12),
             streamlet=list(L=5, h=5),
             scales=list(draw=FALSE),
             panel=panel.levelplot.raster)
#+end_src

** 
#+RESULTS:
[[file:figs/streamplot.pdf]]

** 
#+LANGUAGE:  es
#+OPTIONS:   num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+BEAMER_THEME: Goettingen
#+BEAMER_COLOR_THEME: rose
#+BEAMER_FONT_THEME: serif
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,hideallsubsections]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{boxwidth=\textwidth, fontsize=\tiny, formatcom = {\color{black!70}}}
#+LATEX_HEADER: \usepackage{animate}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org
#+PROPERTY: session *R*


