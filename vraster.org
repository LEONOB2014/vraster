#+TITLE:     Visualización de datos raster
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+DATE: 24 de Octubre de 2014

#+OPTIONS: H:3
#+PROPERTY: eval no
#+PROPERTY: exports both 
#+PROPERTY: results output graphics

* Introducción

** Datos raster
*** 
**** Datos raster
     Los datos raster consisten en una matriz de celdas cuadradas o
     rectangulares organizadas en filas y columnas en la que cada celda
     contiene un valor que representa información (temperatura, altitud,
     uso del terreno). La localización geográfica de cada celda es
     implícita, dependiendo del lugar que ocupa en la rejilla.

** Paquete =raster= 
*** =raster=

- Define funciones para crear, leer, manipular y escribir datos raster.
- Implementa algebra raster y funciones de uso común en GIS.
- Es capaz de trabajar con ficheros muy grandes trabajando en disco y procesando por lotes.
- Clases:
  - =RasterLayer=
  - =RasterBrick=
  - =RasterStack=

**** Introduction to raster
http://cran.r-project.org/web/packages/raster/vignettes/Raster.pdf

*** Álgebra raster

- Funciones básicas: =abs=, =round=, =ceiling=, =floor=, =trunc=,
  =sqrt=, =log=, =log10=, =exp=, =cos=, =sin=, =max=, =min=, =range=,
  =prod=, =sum=, =any=, =all=.
- Se pueden mezclar objetos =Raster*= con números.
  
*** Funciones para modificar extensión
  - =crop= extrae una región geográfica de un objeto =Raster*=
  - =trim= elimina las filas y columnas externas que sólo contienen =NA=.
  - =extend= añade filas y columnas con =NA=.
  - =merge= junta dos =Raster= en un nuevo objeto de mayor extensión.
  - =projectRaster= produce un nuevo =Raster*= con nuevo sistema de referencia geográfica.
*** Funciones para modificar contenido
  - =mask= elimina de una capa los valores que son =NA= en otra.
  - =cover= combina dos capas cogiendo los valores de la primera, excepto allí donde son =NA=.
*** Funciones para combinar objetos.
  - Con =overlay= se pueden combinar múltiples =Raster*= (por ejemplo, para multiplicarlos).
  - =calc= aplica una función en un objeto =Raster*=.
  - =stackApply= agrega capas de un =RasterStack= or =RasterBrick=.
*** Funciones para extraer información
  - =cut= y =reclassify= reemplazan rangos de valores por un único valor (de cuantitativo a cualitativo).
  - =zonal= aplica una función por zonas definidas por un determinado valor entero recogido en un =RasterLayer=.
** Paquete =rasterVis=
*** 
**** =rasterVis=
     Métodos de visualización de datos raster basados en gráficos =grid=

     http://oscarperpinan.github.io/rastervis/


* Datos Cuantitativos

** Datos

*** Radiación solar de CM SAF
**** CM SAF
 - Promedio anual de la radiación global en el plano horizontal
   (shortwave incoming solar radiation, SIS) en España durante 2008.
 - http://dx.doi.org/10.5676/EUM_SAF_CM/RAD_MVIRI/V001

** =levelplot=

*** Representación básica
#+begin_src R :results output graphics :exports both :file figs/leveplotSISavOrig.pdf
  library(raster)
  library(rasterVis)
  SISav <- raster('data/SISav')
  levelplot(SISav)
#+end_src

*** 
#+RESULTS:
[[file:figs/leveplotSISavOrig.pdf]]

*** Fronteras
#+begin_src R 
  library(maps)
  library(mapdata)
  library(maptools)
  
  ext <- as.vector(extent(SISav))
  boundaries <- map('worldHires',
                    xlim=ext[1:2], ylim=ext[3:4],
                    plot=FALSE)
  boundaries <- map2SpatialLines(boundaries,
                                 proj4string=CRS(projection(SISav)))
#+end_src

*** 
#+begin_src R :results output graphics :exports both :file figs/leveplotSISavBoundaries.pdf
  levelplot(SISav) + layer(sp.lines(boundaries,
                                    lwd=0.5))
#+end_src

#+RESULTS:
[[file:figs/leveplotSISavBoundaries.pdf]]

** Ejemplo avanzado: Hill Shading
*** DEM

- Obtenemos un modelo digital del terreno (DEM) de DIVA-GIS.

#+begin_src R :eval no-export
  old <- setwd(tempdir())
  download.file('http://biogeo.ucdavis.edu/data/diva/msk_alt/ESP_msk_alt.zip', 'ESP_msk_alt.zip')
  unzip('ESP_msk_alt.zip', exdir='.')
  
  DEM <- raster('ESP_msk_alt')
#+end_src

*** =terrain= y =hillShade=
- Calculamos el sombreado con =terrain= and =hillShade= de =raster=.

#+begin_src R
  slope <- terrain(DEM, 'slope')
  aspect <- terrain(DEM, 'aspect')
  hs <- hillShade(slope=slope, aspect=aspect,
                  angle=20, direction=30)
#+end_src

#+begin_src R :eval no-export
  setwd(old)
#+end_src

*** Combinamos con transparencia
- Combinamos la capa de sombreado usando transparencia parcial

#+begin_src R :results output graphics :exports both :width 2000 :height 2000 :res 300 :file figs/hillShading.png
  ## hillShade theme: gray colors and semitransparency
  hsTheme <- modifyList(GrTheme(),
                        list(regions=list(alpha=0.6)))
  
  levelplot(SISav, panel=panel.levelplot.raster,
            margin=FALSE, colorkey=FALSE) +
      levelplot(hs, par.settings=hsTheme,
                maxpixels=1e6) +
      layer(sp.lines(boundaries, lwd=0.5))
#+end_src

*** 
#+RESULTS:
[[file:figs/hillShading.png]]

** 3D

*** =plot3D= y =rgl=
#+begin_src R
  plot3D(DEM, maxpixels=5e4)
#+end_src
    
**** 
     El resultado puede exportarse en varios formatos tales como WebGL
     usando =writeWebGL= (para un navegador), o =STL= con =writeSTL= para
     impresión 3D. 
     
     Este último formato se puede [[https://github.com/oscarperpinan/spacetime-vis/blob/gh-pages/images/DEM.stl][ver en GitHub]].

#+begin_src R :eval no-export
writeSTL('figs/DEM.stl')
#+end_src

* Datos Categóricos

** Datos

*** NEO-NASA
- Uso del terreno
  -  http://neo.sci.gsfc.nasa.gov/Search.html?group=20
- Densidad de población
  - http://neo.sci.gsfc.nasa.gov/Search.html?group=64
#+begin_src R :eval no-export
  ## China and India  
  ext <- extent(65, 135, 5, 55)
  
  pop <- raster('data/875430rgb-167772161.0.FLOAT.TIFF')
  pop <- crop(pop, ext)
  pop[pop==99999] <- NA
  
  landClass <- raster('data/241243rgb-167772161.0.TIFF')
  landClass <- crop(landClass, ext)
#+end_src


*** RAT: =cut=

#+begin_src R
  landClass[landClass %in% c(0, 254)] <- NA
  ## Only four groups are needed:
  ## Forests: 1:5
  ## Shrublands, etc: 6:11
  ## Agricultural/Urban: 12:14
  ## Snow: 15:16
  landClass <- cut(landClass, c(0, 5, 11, 14, 16))
#+end_src


*** RAT: =ratify=
#+begin_src R
  ## Add a Raster Attribute Table and define the raster as categorical data
  landClass <- ratify(landClass)
  ## Configure the RAT: first create a RAT data.frame using the
  ## levels method; second, set the values for each class (to be
  ## used by levelplot); third, assign this RAT to the raster
  ## using again levels
  rat <- levels(landClass)[[1]]
  rat$classes <- c('Forest', 'Land', 'Urban', 'Snow')
  levels(landClass) <- rat
#+end_src


** =levelplot=

*** Paleta de colores
#+begin_src R
  pal <- c('palegreen4', # Forest
           'lightgoldenrod', # Land
           'indianred4', # Urban
           'snow3')      # Snow
  
  catTheme <- modifyList(rasterTheme(),
                         list(panel.background = list(
                                  col='lightskyblue1'),
                              regions = list(col= pal)))
  
#+end_src
*** 
#+begin_src R :results output graphics :exports both :file figs/landClass.pdf
  levelplot(landClass, maxpixels=3.5e5,
            par.settings=catTheme,
            panel=panel.levelplot.raster)
#+end_src
    
#+RESULTS:
[[file:figs/landClass.pdf]]

** Datos cualitativos como variable de agrupación
*** Usamos cuantitativos como referencia 

#+begin_src R :results output graphics :exports both :file figs/populationNASA.pdf
  pPop <- levelplot(pop, zscaleLog=10,
                    par.settings=BTCTheme,
                    maxpixels=3.5e5,
                    panel=panel.levelplot.raster)
  pPop
#+end_src

*** 
#+RESULTS:
[[file:figs/populationNASA.pdf]]

*** Comparamos: histograma
#+begin_src R :results output graphics :exports both :file figs/histogramLandClass.pdf
  s <- stack(pop, landClass)
  names(s) <- c('pop', 'landClass')
  histogram(~log10(pop)|landClass, data=s,
            scales=list(relation='free'))
#+end_src
*** 
#+RESULTS:
[[file:figs/histogramLandClass.pdf]]

*** Más comparaciones: gráficos de densidad
- ¿Cómo son las distribuciones en diferentes rangos de latitud y uso de tierra?
#+begin_src R :results output graphics :exports both :width 2000 :height 2000 :res 300 :file figs/densityplotLandClass.png
densityplot(~log10(pop)|cut(y, 4),
            groups = landClass,
            data = s,
            scales = list(y = list(
                              relation = 'free')))
#+end_src
*** 
#+RESULTS:
[[file:figs/densityplotLandClass.png]]

*** Más comparaciones: gráficos de dispersión
- ¿Hay relación entre la población, el uso del suelo y la latitud/longitud?
#+begin_src R :results output graphics :exports both :width 2000 :height 2000 :res 300 :file figs/xyplotLandClass.png
xyplot(log10(pop) ~ y + x,
       groups = landClass,
       data = s,
       auto.key = list(space = 'right'),
       scales = list(x = list(
                         relation = 'free')))
#+end_src

*** 
#+RESULTS:
[[file:figs/xyplotLandClass.png]]

* Raster Espacio-Temporales

** Datos

*** Radiación solar en Galicia (2011)
#+begin_src R 
  library(raster)
  library(zoo)
  library(rasterVis)
  
  SISdm <- brick('data/SISgal')
  
  timeIndex <- seq(as.Date('2011-01-01'), by='day', length=365)
  SISdm <- setZ(SISdm, timeIndex)
  names(SISdm) <- format(timeIndex, '%a_%Y%m%d')
#+end_src


** Level Plots

*** Small multiple

#+begin_src R :results output graphics :exports both :file figs/SISdm.pdf
  levelplot(SISdm, layers=1:12,
            panel=panel.levelplot.raster)
#+end_src


#+RESULTS:
[[file:figs/SISdm.pdf]]

*** Reducimos número de capas: =zApply=
#+begin_src R 
  SISmm <- zApply(SISdm, by=as.yearmon, fun='mean')
#+end_src

#+begin_src R :results output graphics :exports both :file figs/SISmm.pdf
  levelplot(SISmm, panel=panel.levelplot.raster)
#+end_src

#+RESULTS:
[[file:figs/SISmm.pdf]]

** Gráficos EDA (Exploratory Data Analysis)

*** EDA
    - Histograma (=histogram=)
    - Violin plot (=bwplot=)
    - Matriz de gráficos de dispersión (=splom=)

*** 
#+begin_src R :results output graphics :exports both :file figs/SISdm_histogram.pdf
  histogram(SISdm, FUN=as.yearmon)
#+end_src

#+RESULTS:
[[file:figs/SISdm_histogram.pdf]]

*** 
#+begin_src R :results output graphics :exports both :file figs/SISdm_boxplot.pdf
  bwplot(SISdm, FUN=as.yearmon)
#+end_src

#+RESULTS:
[[file:figs/SISdm_boxplot.pdf]]

*** 
#+begin_src R :results output graphics :exports both :file figs/SISmm_splom.png :width 4000 :height 4000 :res 600
  splom(SISmm, xlab='', plot.loess=TRUE)
#+end_src

#+RESULTS:
[[file:figs/SISmm_splom.png]]


** Gráficos espacio temporales

*** 
#+begin_src R :results output graphics :exports both :file figs/SISdm_hovmoller_lat.pdf
  hovmoller(SISdm, par.settings=BTCTheme())
#+end_src
#+RESULTS:
[[file:figs/SISdm_hovmoller_lat.pdf]]

*** 
#+begin_src R :results output graphics :exports both :file figs/SISmm_xyplot.png :width 2000 :height 2000 :res 300
  xyplot(SISdm, digits=1,
         col='black', lwd=0.2, alpha=0.6)
#+end_src

#+RESULTS:
[[file:figs/SISmm_xyplot.png]]

*** 

#+begin_src R :results output graphics :exports both :file figs/SISdm_horizonplot.pdf
  horizonplot(SISdm, digits=1,
              col.regions=rev(brewer.pal(n=6, 'PuOr')),
              xlab='', ylab='Latitude')
#+end_src

#+RESULTS:
[[file:figs/SISdm_horizonplot.pdf]]


** Animación

*** Datos de Meteogalicia
- Predicción horaria de cobertura nubosa
#+begin_src R
  cft <- brick('data/cft_20130417_0000.nc')
  ## use memory instead of file
  cft[] <- getValues(cft)
  ## set projection
  projLCC2d <- "+proj=lcc +lon_0=-14.1 +lat_0=34.823 +lat_1=43 +lat_2=43 +x_0=536402.3 +y_0=-18558.61 +units=km +ellps=WGS84"
  projection(cft) <- projLCC2d
  #set time index
  timeIndex <- seq(as.POSIXct('2013-04-17 01:00:00', tz='UTC'), length=96, by='hour')
  cft <- setZ(cft, timeIndex)
  names(cft) <- format(timeIndex, 'D%d_H%H')
#+end_src

http://mandeo.meteogalicia.es/thredds/catalogos/WRF_2D/catalog.html


*** Referencia espacial: fronteras administrativas
#+begin_src R 
  library(maptools)
  library(rgdal)
  library(maps)
  library(mapdata)
  projLL <- CRS('+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0')
  cftLL <- projectExtent(cft, projLL)
  cftExt <- as.vector(bbox(cftLL))
  boundaries <- map('worldHires',
                    xlim=cftExt[c(1,3)],
                    ylim=cftExt[c(2,4)],
                    plot=FALSE)
  boundaries <- map2SpatialLines(boundaries,
                                 proj4string=projLL)
  boundaries <- spTransform(boundaries,
                            CRS(projLCC2d))
#+end_src


*** Generamos imágenes para una película

- Definimos la paleta de colores
#+begin_src R 
  cloudTheme <- rasterTheme(region=brewer.pal(n = 9,
                                name = 'Blues'))
#+end_src

- Con =layout(1, 1)= generamos un fichero por cada capa.
#+begin_src R :eval no-export
  tmp <- tempdir()
  trellis.device(png,
                 file=paste0(tmp, '/Rplot%02d.png'),
                 res=300, width=1500, height=1500)
  levelplot(cft, layout=c(1, 1),
            par.settings=cloudTheme) +
      layer(sp.lines(boundaries, lwd=0.6))
  dev.off()
#+end_src

*** Componemos la película con ffmpeg

#+begin_src R :eval no-export
  old <- setwd(tmp)
  ## Create a movie with ffmpeg using 6 frames per second a bitrate of 300kbs
  movieCMD <- 'ffmpeg -r 6 -b 300k -i Rplot%02d.png output.mp4'
  system(movieCMD)
  file.remove(dir(pattern='Rplot'))
  file.copy('output.mp4',
            paste0(old, '/figs/cft.mp4'),
            overwrite=TRUE)
  setwd(old)
#+end_src

**** 
     [[http://vimeo.com/user18057623/cft][Video]]

*** Como referencia: small multiple

#+begin_src R :results output graphics :exports both :file figs/cft.pdf
  levelplot(cft, layers=25:48, layout=c(6, 4),
            par.settings=cloudTheme,
            names.attr=paste0(
                sprintf('%02d', 1:24), 'h'),
            panel=panel.levelplot.raster) +
      layer(sp.lines(boundaries, lwd=0.6))
#+end_src

*** 
#+RESULTS:
[[file:figs/cft.pdf]]


* Campos Vectoriales

** Datos

*** Predicciones de viento de Meteogalicia
#+begin_src R 
  library(raster)
  library(rasterVis)
  
  wDir <- raster('data/wDir')/180*pi
  wSpeed <- raster('data/wSpeed')
  windField <- stack(wSpeed, wDir)
  names(windField) <- c('magnitude', 'direction')
#+end_src


** Gráficos de flechas
*** =vectorplot=

- En puntos discretos (muestreando el raster) se dibuja una flecha con dirección y sentido las del campo en ese punto, y con una longitud proporcional a la magnitud del campo.

#+begin_src R :results output graphics :exports both :file figs/vectorplot.pdf
  vectorplot(windField, isField=TRUE,
             par.settings=BTCTheme(),
             colorkey=FALSE,
             scales=list(draw=FALSE))
#+end_src

*** 
#+RESULTS:
[[file:figs/vectorplot.pdf]]

** Streamlines
*** FROLIC
- Curvas integrales, líneas de flujo (/streamlines/).
- Algoritmo (adaptado de [[https://www.cg.tuwien.ac.at/research/vis-dyn-syst/frolic/frolic_crc.pdf][FROLIC]]):
  - En cada punto (/droplet/) de una
    rejilla regular, se calcula una pequeña porción de la línea de
    flujo (/streamlet/) integrando el campo vectorial en ese punto.
  - El color principal de cada /streamlet/ indica la magnitud local del campo.
  - Cada /streamlet/ está compuesta por puntos cuyos tamaños,
    posición, y degradación, codifican la dirección local del campo.

*** =streamplot=
#+begin_src R :results output graphics :exports both :file figs/streamplot.pdf
  myTheme <- streamTheme(region=rev(brewer.pal(n=4,
                             name='Greys')),
                         symbol=BTC(n=9, beg=20))
  streamplot(windField, isField=TRUE,
             par.settings=myTheme,
             droplet=list(pc=12),
             streamlet=list(L=5, h=5),
             scales=list(draw=FALSE),
             panel=panel.levelplot.raster)
#+end_src

*** 
#+RESULTS:
[[file:figs/streamplot.pdf]]

*** 
**** Tu Turno

#+LANGUAGE:  es
#+OPTIONS:   num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+BEAMER_THEME: Goettingen
#+BEAMER_COLOR_THEME: rose
#+BEAMER_FONT_THEME: serif
#+LATEX_HEADER: \AtBeginSubsection[]{\begin{frame}[plain]\tableofcontents[currentsubsection,sectionstyle=show/shaded,subsectionstyle=show/shaded/hide]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{boxwidth=\textwidth, fontsize=\tiny, formatcom = {\color{black!70}}}
#+LATEX_HEADER: \usepackage{animate}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org
#+PROPERTY: session *R*


